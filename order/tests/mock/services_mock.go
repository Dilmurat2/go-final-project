// Code generated by MockGen. DO NOT EDIT.
// Source: D:\Programming\Projects\GOPROJECTS\INF-368-FINAL\order\internal\ports\services.go
//
// Generated by this command:
//
//	mockgen -source=D:\Programming\Projects\GOPROJECTS\INF-368-FINAL\order\internal\ports\services.go -destination=tests\mock\services_mock -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	models "orderService/internal/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockOrderService is a mock of OrderService interface.
type MockOrderService struct {
	ctrl     *gomock.Controller
	recorder *MockOrderServiceMockRecorder
}

// MockOrderServiceMockRecorder is the mock recorder for MockOrderService.
type MockOrderServiceMockRecorder struct {
	mock *MockOrderService
}

// NewMockOrderService creates a new mock instance.
func NewMockOrderService(ctrl *gomock.Controller) *MockOrderService {
	mock := &MockOrderService{ctrl: ctrl}
	mock.recorder = &MockOrderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderService) EXPECT() *MockOrderServiceMockRecorder {
	return m.recorder
}

// CancelOrder mocks base method.
func (m *MockOrderService) CancelOrder(ctx context.Context, id string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelOrder", ctx, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelOrder indicates an expected call of CancelOrder.
func (mr *MockOrderServiceMockRecorder) CancelOrder(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelOrder", reflect.TypeOf((*MockOrderService)(nil).CancelOrder), ctx, id)
}

// ChangeOrderStatus mocks base method.
func (m *MockOrderService) ChangeOrderStatus(ctx context.Context, id, status string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeOrderStatus", ctx, id, status)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeOrderStatus indicates an expected call of ChangeOrderStatus.
func (mr *MockOrderServiceMockRecorder) ChangeOrderStatus(ctx, id, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeOrderStatus", reflect.TypeOf((*MockOrderService)(nil).ChangeOrderStatus), ctx, id, status)
}

// CreateOrder mocks base method.
func (m *MockOrderService) CreateOrder(ctx context.Context, order *models.Order) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, order)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderServiceMockRecorder) CreateOrder(ctx, order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderService)(nil).CreateOrder), ctx, order)
}

// GetOrder mocks base method.
func (m *MockOrderService) GetOrder(ctx context.Context, id string) (*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", ctx, id)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockOrderServiceMockRecorder) GetOrder(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockOrderService)(nil).GetOrder), ctx, id)
}

// MockKitchenServiceClientProxy is a mock of KitchenServiceClientProxy interface.
type MockKitchenServiceClientProxy struct {
	ctrl     *gomock.Controller
	recorder *MockKitchenServiceClientProxyMockRecorder
}

// MockKitchenServiceClientProxyMockRecorder is the mock recorder for MockKitchenServiceClientProxy.
type MockKitchenServiceClientProxyMockRecorder struct {
	mock *MockKitchenServiceClientProxy
}

// NewMockKitchenServiceClientProxy creates a new mock instance.
func NewMockKitchenServiceClientProxy(ctrl *gomock.Controller) *MockKitchenServiceClientProxy {
	mock := &MockKitchenServiceClientProxy{ctrl: ctrl}
	mock.recorder = &MockKitchenServiceClientProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKitchenServiceClientProxy) EXPECT() *MockKitchenServiceClientProxyMockRecorder {
	return m.recorder
}

// ChangeOrderStatus mocks base method.
func (m *MockKitchenServiceClientProxy) ChangeOrderStatus(ctx context.Context, orderId, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeOrderStatus", ctx, orderId, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeOrderStatus indicates an expected call of ChangeOrderStatus.
func (mr *MockKitchenServiceClientProxyMockRecorder) ChangeOrderStatus(ctx, orderId, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeOrderStatus", reflect.TypeOf((*MockKitchenServiceClientProxy)(nil).ChangeOrderStatus), ctx, orderId, status)
}

// ProcessOrder mocks base method.
func (m *MockKitchenServiceClientProxy) ProcessOrder(ctx context.Context, order *models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessOrder", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessOrder indicates an expected call of ProcessOrder.
func (mr *MockKitchenServiceClientProxyMockRecorder) ProcessOrder(ctx, order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessOrder", reflect.TypeOf((*MockKitchenServiceClientProxy)(nil).ProcessOrder), ctx, order)
}
