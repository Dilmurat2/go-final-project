// Code generated by MockGen. DO NOT EDIT.
// Source: internal/ports/repositories.go

// Package mock_ports is a generated GoMock package.
package mock_ports

import (
	context "context"
	models "kitchenService/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockKitchenRepository is a mock of KitchenRepository interface.
type MockKitchenRepository struct {
	ctrl     *gomock.Controller
	recorder *MockKitchenRepositoryMockRecorder
}

// MockKitchenRepositoryMockRecorder is the mock recorder for MockKitchenRepository.
type MockKitchenRepositoryMockRecorder struct {
	mock *MockKitchenRepository
}

// NewMockKitchenRepository creates a new mock instance.
func NewMockKitchenRepository(ctrl *gomock.Controller) *MockKitchenRepository {
	mock := &MockKitchenRepository{ctrl: ctrl}
	mock.recorder = &MockKitchenRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKitchenRepository) EXPECT() *MockKitchenRepositoryMockRecorder {
	return m.recorder
}

// ChangeOrderStatus mocks base method.
func (m *MockKitchenRepository) ChangeOrderStatus(ctx context.Context, orderId string, status *models.OrderStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeOrderStatus", ctx, orderId, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeOrderStatus indicates an expected call of ChangeOrderStatus.
func (mr *MockKitchenRepositoryMockRecorder) ChangeOrderStatus(ctx, orderId, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeOrderStatus", reflect.TypeOf((*MockKitchenRepository)(nil).ChangeOrderStatus), ctx, orderId, status)
}

// ProcessOrder mocks base method.
func (m *MockKitchenRepository) ProcessOrder(ctx context.Context, order *models.Order) (string, *models.OrderStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessOrder", ctx, order)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*models.OrderStatus)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ProcessOrder indicates an expected call of ProcessOrder.
func (mr *MockKitchenRepositoryMockRecorder) ProcessOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessOrder", reflect.TypeOf((*MockKitchenRepository)(nil).ProcessOrder), ctx, order)
}
